#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

#include "Random123/philox.h"

namespace py = pybind11;

uint64_t get_uint64_philox2x32(uint64_t counter, uint32_t key){
  using RNG = r123::Philox2x32;
  RNG rng;
  RNG::ctr_type c = {{
      (uint32_t)(counter & 0xffffffff), 
      (uint32_t)((counter >> 32) & 0xffffffff)
  }};
  RNG::ukey_type uk = {{key}};
  RNG::key_type k = uk;
  RNG::ctr_type rand = rng(c, k);
  return static_cast<uint64_t>(rand[0]) + (static_cast<uint64_t>(rand[1]) << 32);
}

py::array_t<uint64_t> get_uint64_philox2x32_vectorized(
    const py::array_t<uint64_t>& counter,
    const py::array_t<uint32_t>& key) {

    return py::vectorize(get_uint64_philox2x32)(
        counter, key);
}

double get_float64_philox2x32(uint64_t counter, uint32_t key){
    uint64_t val = get_uint64_philox2x32(counter, key);
    return static_cast<double>(val) / static_cast<double>(UINT64_MAX);
}

py::array_t<double> get_float64_philox2x32_vectorized(
    const py::array_t<uint64_t>& counter,
    const py::array_t<uint32_t>& key) {

    return py::vectorize(get_float64_philox2x32)(
        counter, key);
}

uint32_t get_poisson1_philox2x32(uint64_t counter, uint32_t key){
    static constexpr double EXP_MINUS_ONE = 0.367879441171442321595523770161460867445811131031767834507836801697461496; 
    double p = get_float64_philox2x32(counter, key);
    uint32_t k = 0;
    while (p > EXP_MINUS_ONE) {
        ++k;
        p *= get_float64_philox2x32(counter + k, key);
    }
    return k;
}

py::array_t<uint32_t> get_poisson1_philox2x32_vectorized(
    const py::array_t<uint64_t>& counter,
    const py::array_t<uint32_t>& key) {

    return py::vectorize(get_poisson1_philox2x32)(
        counter, key);
}

PYBIND11_MODULE(_philox2x32, m1) {
  m1.def("get_uint64_philox2x32", &get_uint64_philox2x32, R"pbdoc(
      Get a random number from the Philox2x32 RNG
      Args:
          counter (np.uint64): The counter value
          key (np.uint32): The key value
      Returns:
          np.uint64: A random number generated by the RNG
    )pbdoc");

    m1.def("get_uint64_philox2x32", &get_uint64_philox2x32_vectorized, R"pbdoc(
        Get a random number from the Philox2x32 RNG for arrays
        Args:
            counter (np.ndarray): An array of counter values
            key (np.ndarray): An array of key values
        Returns:
            np.ndarray: An array of random numbers generated by the RNG
    )pbdoc");

    m1.def("get_float64_philox2x32", &get_float64_philox2x32, R"pbdoc(
        Get a float64 random number from the Philox2x32 RNG
        Args:
            counter (np.uint64): The counter value
            key (np.uint32): The key value
        Returns:
            np.float64: A random float number generated by the RNG
    )pbdoc");

    m1.def("get_float64_philox2x32", &get_float64_philox2x32_vectorized, R"pbdoc(
        Get float64 random numbers from the Philox2x32 RNG for arrays
        Args:
            counter (np.ndarray): An array of counter values
            key (np.ndarray): An array of key values
        Returns:
            np.ndarray: An array of random float numbers generated by the RNG
    )pbdoc");

    m1.def("get_poisson1_philox2x32", &get_poisson1_philox2x32, R"pbdoc(
        Get a Poisson-distributed random number from the Philox2x32 RNG
        Args:
            counter (np.uint64): The counter value
            key (np.uint32): The key value
        Returns:
            np.uint32: A Poisson-distributed random number generated by the RNG
    )pbdoc");

    m1.def("get_poisson1_philox2x32", &get_poisson1_philox2x32_vectorized, R"pbdoc(
        Get Poisson-distributed random numbers from the Philox2x32 RNG for arrays
        Args:
            counter (np.ndarray): An array of counter values
            key (np.ndarray): An array of key values
        Returns:
            np.ndarray: An array of Poisson-distributed random numbers generated by the RNG
    )pbdoc");
}


